CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(libfluent)

if(POLICY CMP0042)
    cmake_policy(SET CMP0042 NEW)
endif()

SET(CMAKE_CXX_FLAGS "-Wall  -std=c++11")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
SET(CMAKE_CXX_FLAGS_DEBUG   "-O0 -g")
SET(CMAKE_SHARED_LINKER_FLAGS "-dynamiclib")

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

OPTION(FLUENT_INSTALL "install libfluent" ON)
OPTION(USE_MSGPACK_STATIC "use static msgpack library" OFF)

# cmake_policy(SET CMP0015 NEW)

INCLUDE_DIRECTORIES(${INC_DIR} ./src)
LINK_DIRECTORIES(${LIB_DIR})
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    INCLUDE_DIRECTORIES(/usr/local/include)
    LINK_DIRECTORIES(/usr/local/lib)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/../msgpack/include")
    LINK_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/../msgpack/lib")
    INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/../pthread/include")
    LINK_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/../pthread/lib")
ELSE(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/../msgpack/include")
    LINK_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/../msgpack/lib")
ENDIF()
# Build library

FILE(GLOB BASESRCS "src/*.cc" "src/*.hpp")
FILE(GLOB TESTSRCS "test/*.cc")
FILE(GLOB HEADERS "src/fluent/*.hpp")

ADD_LIBRARY(objlib OBJECT ${BASESRCS})
SET_PROPERTY(TARGET ${objlib} PROPERTY POSITION_INDEPENDENT_CODE 1)
IF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
  SET_TARGET_PROPERTIES(objlib PROPERTIES COMPILE_FLAGS "-fPIC")
ENDIF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
ADD_LIBRARY(fluent-shared SHARED $<TARGET_OBJECTS:objlib>)
ADD_LIBRARY(fluent-static STATIC $<TARGET_OBJECTS:objlib>)

TARGET_INCLUDE_DIRECTORIES(objlib PRIVATE "./msgpack/include")
TARGET_INCLUDE_DIRECTORIES(objlib PRIVATE "./pthread/include")

IF(USE_MSGPACK_STATIC)
  TARGET_LINK_LIBRARIES(fluent-shared msgpackc-static pthread)
  TARGET_LINK_LIBRARIES(fluent-static msgpackc-static pthread)
ELSE(USE_MSGPACK_STATIC)
  TARGET_LINK_LIBRARIES(fluent-shared msgpackc pthread)
  TARGET_LINK_LIBRARIES(fluent-static msgpackc pthread)
ENDIF(USE_MSGPACK_STATIC)

SET_TARGET_PROPERTIES(fluent-shared PROPERTIES OUTPUT_NAME fluent)
SET_TARGET_PROPERTIES(fluent-static PROPERTIES OUTPUT_NAME fluent)

ADD_EXECUTABLE(fluent-test ${TESTSRCS})
TARGET_LINK_LIBRARIES(fluent-test fluent-shared)

ADD_EXECUTABLE(fluent-bench tools/fluent-bench.cc)
TARGET_LINK_LIBRARIES(fluent-bench fluent-shared)

IF(FLUENT_INSTALL)
  INSTALL(TARGETS fluent-shared
    EXPORT fluentConfig
    INCLUDES DESTINATION include
    LIBRARY DESTINATION lib
  )
  INSTALL(TARGETS fluent-static DESTINATION lib)
  INSTALL(FILES src/fluent.hpp DESTINATION include/)
  INSTALL(FILES ${HEADERS} DESTINATION include/fluent)
  INSTALL(EXPORT fluentConfig DESTINATION cmake)
ENDIF(FLUENT_INSTALL)
